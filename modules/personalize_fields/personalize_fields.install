<?php

/**
 * @file
 * Sets up the table to link entities with option sets.
 */

/**
 * Implements hook_schema().
 */
function personalize_fields_schema() {
  return array(
    'cache_personalize_fields' => personalize_fields_get_cache_table_schema()
  );
}

/**
 * Implements hook_install().
 */
function personalize_fields_install() {
  // This is done to work around a bug in RDF module
  // @see https://drupal.org/node/1940986 regarding this bug.
  db_update('system')
    ->fields(array('weight' => 20))
    ->condition('name', 'personalize_fields', '=')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function personalize_fields_uninstall() {
  // Remove the "personalizable" setting from all fields. We cannot
  // use field_update_field() for this as it's not possible to remove
  // existing settings (it just merges the old settings into whatever
  // settings you pass it).
  $result = db_select('field_config', 'f')
    ->fields('f', array('id', 'data'))
    ->execute();
  foreach ($result as $row) {
    $data = unserialize($row->data);
    if (isset($data['settings']['personalizable'])) {
      unset($data['settings']['personalizable']);
    }
    db_update('field_config')
      ->fields(array('data' => serialize($data)))
      ->condition('id', $row->id)
      ->execute();
  }
}

/**
 * Add a cache table for entity fields.
 */
function personalize_fields_update_7001() {
  $schema = personalize_fields_get_cache_table_schema();
  db_create_table('cache_personalize_fields', $schema);

  // Now get all existing fields-based option sets and convert their field info
  // to the new storage.
  $result = db_select('personalize_fields_option_sets', 'pf')
    ->fields('pf')
    ->execute();
  foreach ($result as $row) {
    $option_set = personalize_option_set_load($row->osid);
    $option_set->data['personalize_fields_entity_type'] = $row->entity_type;
    $option_set->data['personalize_fields_entity_id'] = $row->entity_id;
    $option_set->data['personalize_fields_field_name'] = $row->field_name;
    personalize_option_set_save($option_set);
    $cid = _personalize_fields_get_cid_for_field($row->entity_type, $row->entity_id, $row->field_name);
    cache_set($cid, $option_set->osid, 'cache_personalize_fields');
  }
  // Now drop the old table.
  db_drop_table('personalize_fields_option_sets');
}

/**
 * Helper to get the schema for the cache table.
 */
function personalize_fields_get_cache_table_schema() {
  $table_schema = drupal_get_schema_unprocessed('system', 'cache');
  $table_schema['description'] = 'Cache table for storing option set IDs for field instances.';
  return $table_schema;
}