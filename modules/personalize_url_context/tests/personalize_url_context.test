<?php

/**
 * @file
 * Tests for Personalize URL Context module.
 */

class PersonalizeUrlContextTest extends DrupalWebTestCase {

  protected $adminUser;
  protected $managerUser;

  public static function getInfo() {
    return array(
      'name' => t('Personalize URL Context Tests'),
      'description' => t('Tests basic functionality of Personalize URL Context module.'),
      'group' => t('Personalize'),
    );
  }

  function setUp() {
    parent::setUp(array('ctools', 'personalize', 'personalize_test', 'personalize_url_context'));
  }

  function testConfiguration() {
    $admin_user = $this->drupalCreateUser(array('administer personalize configuration', 'access administration pages'));
    $this->drupalLogin($admin_user);

    $this->drupalPost('admin/config/content/personalize/url_context', array(), t('Save'));
    $params = variable_get('personalize_url_querystring_contexts', array());
    $expected = array(
      'utm_campaign',
      'utm_source',
      'utm_medium',
      'utm_content',
      'utm_term',
    );
    $this->assertEqual($expected, $params);
    $this->drupalPost('admin/config/content/personalize/url_context', array('contexts' => "some-param"), t('Save'));
    $params = variable_get('personalize_url_querystring_contexts', array());
    $expected = array(
      'some-param'
    );
    $this->assertEqual($expected, $params);

    // Submit them all
    $edit = array(
      'contexts' => "some-param\r\nparam2 \r\nparam3",
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $params = variable_get('personalize_url_querystring_contexts', array());
    $expected = array('some-param', 'param2', 'param3');
    $this->assertEqual($expected, $params);
    $this->resetAll();
    ctools_include('plugins');
    $class = ctools_plugin_load_class('personalize', 'visitor_context', 'querystring_context', 'handler');

    // Test that getOptions returns the right values.
    $options = call_user_func(array($class, 'getOptions'));
    $expected_param_names = array();
    foreach (array('some-param', 'param2', 'param3') as $name) {
      $expected_param_names[$name] = array(
        'name' => $name,
        'group' => 'Querystring Params',
      );
    }
    $expected_param_names['referrer_url'] = array(
      'name' => t('Referrer URL')
    );
    $this->assertEqual($expected_param_names, $options);

    // Test that getPossibleValues returns the right values. For this we
    // need to instantiate the plugin, which requires an agent.
    $agent = personalize_agent_load_agent('test-agent');
    $context_plugin = call_user_func_array(array($class, 'create'), array($agent, array('param2', 'param3')));
    $expected_values = array();
    foreach (array('param2', 'param3') as $name) {
      $expected_values[$name] = array(
        'value type' => 'string'
      );
    }
    $expected_values['referrer_url'] = array(
      'value type' => 'string',
      'friendly name' => t('Referrer URL')
    );
    $possible_values = $context_plugin->getPossibleValues();
    $this->assertEqual($expected_values, $possible_values);
  }
}
