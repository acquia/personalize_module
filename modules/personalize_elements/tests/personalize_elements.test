<?php

/**
 * @file
 * Tests for Personalize Elements module.
 */

class PersonalizeElementsTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Personalize Elements Tests'),
      'description' => t('Tests basic functionality of Personalize Elements module.'),
      'group' => t('Personalize'),
    );
  }

  function setUp() {
    parent::setUp(array('personalize_elements', 'personalize_test'));
  }

  /**
   * Tests adding and editing Personalize Elements Option Sets.
   */
  function testPersonalizeElementsConfiguration() {
    $admin_user = $this->drupalCreateUser(array('access administration pages', 'administer site configuration', 'access content', 'manage personalized content'));
    $this->drupalLogin($admin_user);
    $edit = array(
      'agent_select' => 'test-agent',
      'title' => $this->randomName(),
      'selector' => '#some-id',
      'add_control_option' => FALSE,
    );
    $this->drupalPost('admin/structure/personalize-elements/add', $edit, t('Save'));
    $this->assertText('You must choose a variation type');

    $edit['variation_type'] = 'replaceHtml';
    $this->drupalPost('admin/structure/personalize-elements/add', $edit, t('Save'));
    $this->assertText('You must have at least 2 options for an option set');
    $this->drupalPost(NULL, array(), t('Add another'));
    $this->assertFieldByName('options[1][option_label]', personalize_generate_option_label(1));
    $edit['options[0][option_label]'] = 'first-option';
    $edit['options[0][personalize_elements_content]'] = 'some content';
    $edit['options[1][option_label]'] = 'second-option';
    $edit['options[1][personalize_elements_content]'] = 'other content';
    $this->drupalPost(NULL, $edit, t('Save'));

    $option_set = personalize_option_set_load(1);
    $this->assertEqual(2, count($option_set->options));
    $edit = array();
    $edit['add_control_option'] = TRUE;
    $this->drupalPost('admin/structure/personalize-elements/manage/1/edit', $edit, t('Save'));

    $option_set = personalize_option_set_load(1, TRUE);
    $this->assertEqual(3, count($option_set->options));

    // Add another element and assert that all the options have the expected
    // settings.
    $this->drupalGet('admin/structure/personalize-elements/manage/1/edit');
    $this->drupalPost(NULL, array(), t('Add another'));
    $edit = array();
    $edit['options[3][personalize_elements_content]'] = 'moar content';
    $this->drupalPost(NULL, $edit, t('Save'));
    $option_set = personalize_option_set_load(1, TRUE);
    $control_option = array(
      'option_id' => PERSONALIZE_ELEMENTS_CONTROL_OPTION_ID,
      'option_label' => PERSONALIZE_ELEMENTS_CONTROL_OPTION_LABEL,
      'personalize_elements_content' => '',
    );
    $expected = array(
      0 => $control_option,
      1 => array(
        'option_id' => 'first-option',
        'option_label' => 'first-option',
        'personalize_elements_content' => 'some content',
      ),
      2 => array(
        'option_id' => 'second-option',
        'option_label' => 'second-option',
        'personalize_elements_content' => 'other content',
      ),
      3 => array(
        'option_id' => 'option-c',
        'option_label' => 'Option C',
        'personalize_elements_content' => 'moar content',
      ),
    );
    $this->assertEqual(count($expected), count($option_set->options));
    foreach ($expected as $i => $option) {
      $this->assertEqual($option, $option_set->options[$i]);
    }

    // Remove one of the options by setting label and content to nothing.
    $edit = array();
    $edit['options[2][option_label]'] = '';
    $edit['options[2][personalize_elements_content]'] = '';
    $this->drupalPost('admin/structure/personalize-elements/manage/1/edit', $edit, t('Save'));
    unset($expected[2]);
    $expected = array_values($expected);
    $option_set = personalize_option_set_load(1, TRUE);
    $this->assertEqual(count($expected), count($option_set->options));
    foreach ($expected as $i => $option) {
      $this->assertEqual($option, $option_set->options[$i]);
    }

    // Remove the control option.
    $edit = array();
    $edit['add_control_option'] = FALSE;
    $this->drupalPost('admin/structure/personalize-elements/manage/1/edit', $edit, t('Save'));
    unset($expected[0]);
    $expected = array_values($expected);
    $option_set = personalize_option_set_load(1, TRUE);
    $this->assertEqual(count($expected), count($option_set->options));
    foreach ($expected as $i => $option) {
      $this->assertEqual($option, $option_set->options[$i]);
    }

    // Try removing another option, should fail validation.
    $edit = array();
    $edit['options[0][option_label]'] = '';
    $edit['options[0][personalize_elements_content]'] = '';
    $this->drupalPost('admin/structure/personalize-elements/manage/1/edit', $edit, t('Save'));
    $this->assertText('You must have at least 2 options for an option set');
    $option_set = personalize_option_set_load(1, TRUE);
    $this->assertEqual(count($expected), count($option_set->options));
    foreach ($expected as $i => $option) {
      $this->assertEqual($option, $option_set->options[$i]);
    }

    // Add back the control option.
    $edit = array();
    $edit['add_control_option'] = TRUE;
    $this->drupalPost('admin/structure/personalize-elements/manage/1/edit', $edit, t('Save'));
    array_unshift($expected, $control_option);
    $option_set = personalize_option_set_load(1, TRUE);
    $this->assertEqual(count($expected), count($option_set->options));
    foreach ($expected as $i => $option) {
      $this->assertEqual($option, $option_set->options[$i]);
    }
  }

  function testPersonalizeElementsNewCampaign() {
    $admin_user = $this->drupalCreateUser(array('access administration pages', 'administer site configuration', 'access content', 'manage personalized content'));
    $this->drupalLogin($admin_user);
    // Now choose to add a new agent instead of selecting an existing one.
    $agent_name = $this->randomName();
    $machine_name = personalize_generate_machine_name($agent_name, 'personalize_agent_machine_name_exists');
    $edit = array(
      'agent_select' => PERSONALIZE_NEW_AGENT_FORM_VALUE,
      'agent_basic_info[title]' => $agent_name,
      'agent_basic_info[options][test_agent][use_client_side_goal_processing]' => FALSE,
      'title' => $this->randomName(),
      'variation_type' => 'replaceHtml',
      'selector' => '#some-id',
      'add_control_option' => TRUE,
      'options[0][option_label]' => 'first-option',
      'options[0][personalize_elements_content]' => 'some content'
    );
    $this->drupalPost('admin/structure/personalize-elements/add', $edit, t('Save'));
    $this->resetAll();
    if ($agent = personalize_agent_load_agent($machine_name)) {
      $this->assertTrue($agent instanceof PersonalizeTestAgent);
      $this->assertFalse($agent->useClientSideGoalDelivery());
    }
    else {
      $this->fail("The agent was not saved");
    }
    $option_set = personalize_option_set_load(1);
    $this->assertEqual(2, count($option_set->options));
    $this->assertEqual($machine_name, $option_set->agent);
  }

  /**
   * Tests that the correct settings are added when Personalize Elements
   * are configured.
   */
  function testPersonalizeElements() {
    $admin_user = $this->drupalCreateUser(array('access administration pages', 'administer site configuration', 'access content', 'manage personalized content'));
    $this->drupalLogin($admin_user);
    $selector = '#my-id .my-class';
    $variation_type = 'addClass';
    $option_set = $this->createPersonalizedElement(array('selector' => $selector, 'variation_type' => $variation_type));
    $this->drupalGet('');
    // Make sure the expected js settings are there.
    $settings = $this->drupalGetSettings();
    $personalize_elements_settings = $settings['personalize_elements'];
    $this->assertEqual(PERSONALIZE_ELEMENTS_CONTROL_OPTION_ID, $personalize_elements_settings['controlOptionName']);
    $js_id = $js_id = personalize_stringify_osid($option_set->osid);
    $expected = array(
      $js_id => array(
        'selector' => $selector,
        'variation_type' => $variation_type,
      )
    );
    $this->assertEqual($expected, $personalize_elements_settings['elements']);
    // Now edit the option set and specify that it should only apply to the user page.
    $edit = array(
      'pages' => "user\r\nuser/*"
    );
    $this->drupalPost("admin/structure/personalize-elements/manage/{$option_set->osid}/edit", $edit, t('Save'));
    $this->resetAll();

    $this->drupalGet('');
    $settings = $this->drupalGetSettings();
    // There should be no settings on the home page.
    $this->assertFalse(isset($settings['personalize_elements']));

    $this->drupalGet('user');
    // The settings should show up on the user page.
    $settings = $this->drupalGetSettings();
    $personalize_elements_settings = $settings['personalize_elements'];
    $this->assertEqual(PERSONALIZE_ELEMENTS_CONTROL_OPTION_ID, $personalize_elements_settings['controlOptionName']);
    $this->assertEqual($expected, $personalize_elements_settings['elements']);
  }

  /**
   * Helper method to create a Personalize Elements Option Set.
   *
   * @param array $edit
   *   An array of values for the creation form.
   * @param bool $assertResult
   *   Whether to assert the results of option set creation.
   * @param int $num_options
   *   Number of options being created. (Any options beyond the first two need
   *   to be supplied in the edit array.)
   * @return mixed
   *   A stdClass object representing the created option set.
   */
  protected function createPersonalizedElement($edit = array(), $assertResult = TRUE, $num_options = 2) {
    $this->drupalGet('admin/structure/personalize-elements/add');
    // Only fields for the first option will be available when the form is loaded.
    // For the second and subsequent options, we need to hit the "Add another" button.
    for ($i = 1; $i < $num_options; $i++) {
      $this->drupalPost(NULL, array(), t('Add another'));
    }
    $edit += array(
      'agent_select' => 'test-agent',
      'title' => $this->randomName(),
      'selector' => '#some-id',
      'variation_type' => 'replaceHtml',
      'add_control_option' => FALSE,
      'pages' => '',
      'options[0][option_label]' => personalize_generate_option_label(0),
      'options[0][personalize_elements_content]' => $this->randomName(),
      'options[1][option_label]' => personalize_generate_option_label(1),
      'options[1][personalize_elements_content]' => $this->randomName(),
    );

    $this->drupalPost(NULL, $edit, t('Save'));
    $option_sets = personalize_option_set_load_multiple(array(), array('label' => $edit['title']), TRUE);
    $option_set = reset($option_sets);
    if ($assertResult) {
      $this->assertTRUE(!empty($option_set) && $option_set->label == $edit['title']);
      $this->assertText($edit['title']);

      $this->drupalGet('admin/structure/personalize-elements/manage/' . $option_set->osid . '/edit');

      $this->assertRaw($edit['title']);
      $this->assertRaw($edit['options[0][option_label]']);
      $this->assertRaw($edit['options[1][option_label]']);
      $this->assertRaw($edit['options[0][personalize_elements_content]']);
      $this->assertRaw($edit['options[1][personalize_elements_content]']);
    }
    return $option_set;
  }
}
